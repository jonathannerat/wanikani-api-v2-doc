# Assignments

Assignments contain information about a user's progress against a particular subject, including their current state and timestamps for various progress milestones. Assignments are created when a user has passed all the components of the given subject _and_ the assignment is at or below their current level.

## Assignment Data Structure

> Example Structure

```json
{
  "id": 80463006,
  "object": "assignment",
  "url": "<%= current_page.data.api_root_url %>/assignments/80463006",
  "data_updated_at": "2017-10-30T01:51:10.438432Z",
  "data": {
    "created_at": "2017-09-05T23:38:10.695133Z",
    "subject_id": 8761,
    "subject_type": "radical",
    "level": 1,
    "srs_stage": 8,
    "srs_stage_name": "Enlightened",
    "unlocked_at": "2017-09-05T23:38:10.695133Z",
    "started_at": "2017-09-05T23:41:28.980679Z",
    "passed_at": "2017-09-07T17:14:14.491889Z",
    "burned_at": null,
    "available_at": "2018-02-27T00:00:00.000000Z",
    "resurrected_at": null,
    "passed": true,
    "resurrected": false
  }
}
```

Attribute | Data Type | Description
--------- | --------------- | -----------
`created_at` | Date | Timestamp when the assignment was created.
`subject_id` | Integer | Unique identifier of the associated [subject](#subjects).
`subject_type` | String | The type of the associated [subject](#subjects), one of: `Kanji`, `Radical`, or `Vocabulary`.
`level` | Integer | The level of the assignment, from `1` to `60`
`srs_stage` | Integer | The current [SRS stage interval](#srs-stage-intervals), from `0` to `9`.
`srs_stage_name` | String | The [stage name](#srs-stage-intervals) associated with the `srs_stage`.
`unlocked_at` | `null`&nbsp;or&nbsp;Date | <p>The timestamp when the related subject has its prerequisites satisfied and is made available in lessons.</p> <p>Prerequisites are:</p><ul><li>The subject components have reached SRS stage `5` once (they have been “passed”).</li><li>The user's level is equal to or greater than the level of the assignment’s subject.</li></ul>
`started_at` | `null`&nbsp;or&nbsp;Date | Timestamp when the user completes the lesson for the related subject.
`passed_at` | `null`&nbsp;or&nbsp;Date | Timestamp when the user reaches SRS stage `5` for the first time.
`burned_at` | `null`&nbsp;or&nbsp;Date | Timestamp when the user reaches SRS stage `9` the first time.
`available_at` | `null`&nbsp;or&nbsp;Date | The date when the related subject will be available in the user's review queue.
`resurrected_at` | `null`&nbsp;or&nbsp;Date | The date when the subject is resurrected and placed back in the user's review queue.
`passed` | Boolean | The Boolean equivalent of `passed_at`
`resurrected` | Boolean | A convenience field indicating that the subject has been burned, resurrected, and is still in the user's review queue. It's possible to figure this out from the other fields, but, hey, this is more convenient!

## Get All Assignments

> To `GET` all the assignments use the code below:

<%= partial('examples/GET_shell', locals: { api_endpoint: 'subjects' }) %>

<%= partial('examples/GET_javascript', locals: { api_endpoint: 'subjects' }) %>

> The above command returns JSON structured like this:

```json
{
  "object": "collection",
  "url": "<%= current_page.data.api_root_url %>/assignments",
  "pages": {
    "per_page": 1000,
    "next_url": "<%= current_page.data.api_root_url %>/assignments?page_after_id=80469434",
    "previous_url": null
  },
  "total_count": 1600,
  "data_updated_at": "2017-11-29T19:37:03.571377Z",
  "data": [
    {
      "id": 80463006,
      "object": "assignment",
      "url": "<%= current_page.data.api_root_url %>/assignments/80463006",
      "data_updated_at": "2017-10-30T01:51:10.438432Z",
      "data": {
        "created_at": "2017-09-05T23:38:10.695133Z",
        "subject_id": 8761,
        "subject_type": "radical",
        "level": 1,
        "srs_stage": 8,
        "srs_stage_name": "Enlightened",
        "unlocked_at": "2017-09-05T23:38:10.695133Z",
        "started_at": "2017-09-05T23:41:28.980679Z",
        "passed_at": "2017-09-07T17:14:14.491889Z",
        "burned_at": null,
        "available_at": "2018-02-27T00:00:00.000000Z",
        "resurrected_at": null,
        "passed": true,
        "resurrected": false
      }
    }
  ]
}
```

This endpoint retrieves all assignments in the following states:

 * Ordered by ascending `created_at`
 * Paginated by 1000 resources.

### HTTP Request

`GET <%= current_page.data.api_root_url %>/assignments`

### Query Parameters

If any of the parameters are included in the query, the `data` collection will return `assignments` based on the conditions assigned.

Name | Permitted values | Description
---- | ---------------- | -----------
`available_after` | Date | Returns `data.available_at` > `available_after`.
`available_before` | Date | Returns `data.available_at` < `available_before`.
`burned` | Boolean | Returns `data.burned_at` present if `true`. <br><br>Returns `data.burned_at` with `null` if `false`.
`ids` | Comma-delimited integers | Returns `data.id` included in values.
`levels` | Comma-delimited integers, where integer between and including `1` and `60` | Return `data.level` included in values.
`passed` | Boolean | Return `data.passed` equal to value.
`resurrected` | Return `data.resurrected` equal to value.
`srs_stages` | Comma-delimited integers, where integer between and including `0` and `9` | Returns `data.srs_stage` included in values.
`subject_ids` | Comma-delimited integers | Returns `data.subject_id` included in values.
`subject_types` | Comma-delimited strings, where string is `radical`, `kanji`, or `vocabulary` | Returns `data.subject_type` included in values.
`updated_after` | Date | Returns `data_updated_at` > `updated_after`.

### Query Parameter Examples

#### Assignments Available for Review in Two Hours

If the date time now is November 11, 2017 8:42:00 AM UTC:

`<%= current_page.data.api_root_url %>/assignments?available_after=2017-11-11T10:42:00Z`

#### Level 8 and 42 Kanji Assignments Which Have Been Burned

`<%= current_page.data.api_root_url %>/assignments?levels=8,42&subject_types=kanji&burned=true`

#### Assignments Updated After One Hour Ago and at SRS Stage Master I

If the date time now is November 11, 2017 8:42:00 AM UTC:

`<%= current_page.data.api_root_url %>/assignments?updated_after=2017-11-11T7:42:00Z&srs_stages=7`

## Get a Specific Assignment

> To `GET` a specific assignment use the code below:

<%= partial('examples/GET_shell', locals: { api_endpoint: 'assignments/80463006' }) %>

<%= partial('examples/GET_javascript', locals: { api_endpoint: 'assignments/80463006' }) %>

> The above command returns JSON structured like this:

```json
{
  "id": 80463006,
  "object": "assignment",
  "url": "<%= current_page.data.api_root_url %>/assignments/80463006",
  "data_updated_at": "2017-11-29T19:37:03.571377Z",
  "data": {
    "created_at": "2017-09-05T23:38:10.695133Z",
    "subject_id": 8761,
    "subject_type": "radical",
    "level": 1,
    "srs_stage": 8,
    "srs_stage_name": "Enlightened",
    "unlocked_at": "2017-09-05T23:38:10.695133Z",
    "started_at": "2017-09-05T23:41:28.980679Z",
    "passed_at": "2017-09-07T17:14:14.491889Z",
    "burned_at": null,
    "available_at": "2018-02-27T00:00:00.000000Z",
    "passed": true,
    "resurrected_at": null,
    "resurrected": false
  }
}
```

This endpoint retrieves a specific assignment by its `id`.

<aside class="warning">
Make sure to replace the <code>80463006</code> in the example with the specific assignment's id.
</aside>

### Timestamps

`unlocked_at`, `started_at`, `passed_at`, `burned_at` timestamps are in sequential order as listed.
