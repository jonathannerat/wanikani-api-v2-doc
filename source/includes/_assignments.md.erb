# Assignments

Assignment resources contain information regarding the User's current SRS state and milestones with an associated subject.

## Assignment `data` Structure

> Below is the structure of an `assignment` `data` object

```
{
  "subject_id": <integer>,
  "subject_type": <string>,
  "level": <integer>,
  "srs_stage": <integer>,
  "srs_stage_name": <string>,
  "unlocked_at": <date_or_null>,
  "started_at": <date_or_null>,
  "passed_at": <date_or_null>,
  "burned_at": <date_or_null>,
  "available_at": <date_or_null>,
  "passed": <boolean>,
  "resurrected": <boolean>
}
```

Attribute | Possible Values | Description
--------- | --------------- | -----------
`subject_id` | Integers     | Unique identification related to one `subject` resource. See [Subjects](#subjects).
`subject_type` | `Kanji`, `Radical`, or `Vocabulary` | The subject type the `assignment` is related to. See [Subjects](#subjects).
`level` | Between and including `1` and `60` | The WaniKani level the related `subject` belongs to.
`srs_stage` | Between and including `0` and `9` | The current SRS progression stage the related `subject` is at. <br><br>`0` — Has not been completed in lessons, and therefore not in the review state. <br><br>`1` to `8` — Currently in the review state. <br><br>`9` — Burned, therefore no longer in the review state.
`srs_stage_name` | `Initiate`, `Apprentice I`, `Apprentice II`, `Apprentice III`, `Apprentice IV`, `Guru I`, `Guru II`, `Master`, `Enlightened`, or `Burned` | The WaniKani SRS stage name associated to the `srs_stage`.
`unlocked_at` | `null` or Date | The timestamp when the related `subject` has its prerequisites satisfied and made available to lessons. <br><br>Prerequisites are the following: <br><br>The subject components have have reached `srs_stage` `5` the first time (passing). <br><br>The User's level is equal to or greater than the `subject` resource `level`.
`started_at` | `null` or Date | The timestamp when the User has complete the lesson for the related `subject`.
`passed_at` | `null` or Date | The timestamp when the User has reached the satisfactory `srs_stage` (`5`) the first time.
`burned_at` | `null` or Date | The timestamp when the User has reached `srs_stage` `9` the first time.
`available_at` | `null` or Date | The date when the related `subject` will be available in the User's review queue.
`passed` | Boolean | The Boolean equivalent of `passed_at`
`resurrected` | Boolean | The state if the User has unburned the subject and added back to the review queue.

## Get All Assignments

> To `GET` all the assignments use the code below:

<%= partial('examples/GET_shell', locals: { api_endpoint: 'subjects' }) %>

<%= partial('examples/GET_javascript', locals: { api_endpoint: 'subjects' }) %>

> The above command returns JSON structured like this:

```json
{
  "object": "collection",
  "url": "<%= current_page.data.api_root_url %>/assignments",
  "pages": {
    "per_page": 1000,
    "next_url": "<%= current_page.data.api_root_url %>/assignments?page_after_id=80469434",
    "previous_url": null
  },
  "total_count": 1600,
  "data_updated_at": "2017-11-29T19:37:03.571377Z",
  "data": [
    {
      "id": 80463006,
      "object": "assignment",
      "url": "<%= current_page.data.api_root_url %>/assignments/80463006",
      "data_updated_at": "2017-10-30T01:51:10.438432Z",
      "data": {
        "subject_id": 8761,
        "subject_type": "radical",
        "level": 1,
        "srs_stage": 8,
        "srs_stage_name": "Enlightened",
        "unlocked_at": "2017-09-05T23:38:10.695133Z",
        "started_at": "2017-09-05T23:41:28.980679Z",
        "passed_at": "2017-09-07T17:14:14.491889Z",
        "burned_at": null,
        "available_at": "2018-02-27T00:00:00.000000Z",
        "passed": true,
        "resurrected": false
      }
    }
  ]
}
```

This endpoint retrieves all assignments, paginated by 1000 `assignment` resources.

### HTTP Request

`GET <%= current_page.data.api_root_url %>/assignments`

### Query Parameters

If any of the parameters are included in the query, the `data` collection will include `assignments` based on the conditions assigned.

Name | Permitted values | Description
---- | ---------------- | -----------
`available_after` | Date | Returns `data.available_at` > `available_after`.
`available_before` | Date | Returns `data.available_at` < `available_before`.
`burned` | Boolean | Returns `data.burned_at` present if `true`. Returns `data.burned_at` with `null` if `false`.
`ids` | Comma-delimited integers | Returns `data.id` included in values.
`levels` | Comma-delimited integers, where integer between and including `1` and `60` | Return `data.level` included in values.
`passed` | Boolean | Return `data.passed` equal to value.
`srs_stages` | Comma-delimited integers, where integer between and including `0` and `9` | Returns `data.srs_stage` included in values.
`subject_ids` | Comma-delimited integers | Returns `data.subject_id` included in values.
`subject_types` | Comma-delimited strings, where string is `radical`, `kanji`, or `vocabulary` | Returns `data.subject_type` included in values.
`updated_after` | Date | Returns `data_updated_at` > `updated_after`.

### Query Parameter Examples
